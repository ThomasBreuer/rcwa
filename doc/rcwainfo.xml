<!-- ################################################################################# -->
<!-- ##                                                                             ## -->
<!-- ##  rcwainfo.xml                RCWA documentation                Stefan Kohl  ## -->
<!-- ##                                                                             ## -->
<!-- ##  $Id$                   ## -->
<!-- ##                                                                             ## -->
<!-- ##  Copyright (C) 2002 by Stefan Kohl, Mathematisches Institut B,              ## -->
<!-- ##  Universit\"at Stuttgart, Germany                                           ## -->
<!-- ##                                                                             ## -->
<!-- ################################################################################# -->

<Chapter Label="ch:RcwaInfo">
<Heading>Getting Information about Computations</Heading>

<!-- ################################################################################# -->

<Section Label="sec:TheInfoClass">
<Heading>The Info class of the package</Heading>

  <ManSection>
    <InfoClass Name="InfoRCWA"/>
    <Description>
      This is the Info class of the <Package>RCWA</Package> package
      (see section <E>Info Functions</E> in the &GAP;
      Reference Manual for a description of the Info mechanism).
    </Description>
  </ManSection>

  <ManSection>
    <Func Name="RCWAInfo" Arg="n"/>
    <Returns> Nothing. </Returns>
    <Description>
      For convenience: <C>RCWAInfo(</C> <A>n</A> <C>)</C> is a shorthand for
      <C>SetInfoLevel( InfoRCWA</C>, <A>n</A> <C>)</C>.

<Log>
<![CDATA[
gap> RCWAInfo(5);
gap> T := RcwaMapping([[1,0,2],[3,1,2]]);;
gap> v := RcwaMapping([[-1,2,1],[1,-1,1],[1,-1,1]]);;
gap> w := RcwaMapping([[-1,3,1],[1,-1,1],[1,-1,1],[1,-1,1]]);;
gap> IsTame(T);
#I  IsTame: the 4th power of IntegralRcwaMapping( [ [ 1, 0, 2 ], [ 3, 1, 2 ] 
 ] ) has Modulus 
16; this is larger than the square of the modulus of the base, so we claim the\
 mapping is wild, although the validity of this criterium has not yet been pro\
ved.
false
gap> StandardizingConjugator(v);
#I  StandardConjugate for IntegralRcwaMapping( 
[ [ -1, 2, 1 ], [ 1, -1, 1 ], [ 1, -1, 1 ] ] )
#I  A set of representatives for the series of `halved' cycles is [ rec(
      pts := [ 3, -1, -2, -3, 5, 4 ],
      HalvedAt := 0 ) ].
#I  A set of representatives for the series of `non-halved' cycles is [  ].
#I  The cycle type is [ [ 6 ], [  ] ].
#I  The `non-halved' cycles as they are mapped to cycles of
the standard conjugate:
[  ].
#I  [Preimage, image] - pairs defining a standardizing conjugator are 
[ [ 0, 0 ], [ 2, 1 ], [ 1, 2 ], [ 3, -3 ], [ -1, -2 ], [ -2, -1 ], [ -3, 3 ], 
  [ 5, 4 ], [ 4, 5 ] ].
<integral rcwa mapping with modulus 3>
gap> G := Group(v,w);
<integral rcwa group with 2 generators>
gap> Size(G);
#I  Order: the 12th power of the argument is IntegralRcwaMapping( 
[ [ 1, 0, 1 ], [ 1, 0, 1 ], [ 1, -24, 1 ], [ 1, 24, 1 ], [ 1, 0, 1 ], 
  [ 1, -24, 1 ], [ 1, 0, 1 ], [ 1, 0, 1 ], [ 1, -24, 1 ], [ 1, -24, 1 ], 
  [ 1, 0, 1 ], [ 1, -24, 1 ] ] ); this mapping shifts the residue class 2 mod 
12 non-identically onto itself, hence its order is infinity.
infinity
gap> IsTransitive(G,Integers);
#I  IsTransitive: testing for finiteness and searching short orbits ...
#I  Searching for class shifts ...
#I  ... in generators
#I  ... in commutators of the generators
#I  ... in powers of the generators
#I  ... in powers of the commutators of the generators
#I  ... in powers of words of length 2 in the generators
#I  ... in powers of words of length 3 in the generators
#I  The cyclic group generated by IntegralRcwaMapping( 
[ [ 1, 0, 1 ], [ 1, 0, 1 ], [ 1, -24, 1 ], [ 1, 24, 1 ], [ 1, 0, 1 ], 
  [ 1, -24, 1 ], [ 1, 0, 1 ], [ 1, 0, 1 ], [ 1, -24, 1 ], [ 1, -24, 1 ], 
  [ 1, 0, 1 ], [ 1, -24, 1 ] ] ) acts transitively on the residue class 2 mod 
24.
#I  OrbitUnion: initial set = ResidueClassUnion( Integers, 24, [ 2 ] )
#I  Image = ResidueClassUnion( Integers, 24, [ 0, 1, 2, 3 ] )
#I  Image = ResidueClassUnion( Integers, 24, [ 0, 1, 2, 3, 4, 5, 22, 23 ] )
#I  Image = ResidueClassUnion( Integers, 24, 
[ 0, 1, 2, 3, 4, 5, 6, 20, 21, 22, 23 ] )
#I  Image = ResidueClassUnion( Integers, 24, [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 
  19, 20, 21, 22, 23 ] )
#I  Image = ResidueClassUnion( Integers, 24, [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
  17, 18, 19, 20, 21, 22, 23 ] )
#I  Image = ResidueClassUnion( Integers, 24, [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
  10, 11, 16, 17, 18, 19, 20, 21, 22, 23 ] )
#I  Image = ResidueClassUnion( Integers, 24, [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
  10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ] )
#I  Image = Integers
true
gap> RCWAInfo(0);
]]>
</Log>

    </Description>
  </ManSection>

  <Alt Only="HTML">&nbsp;</Alt>

</Section>

<!-- ################################################################################# -->

</Chapter>

<!-- ################################################################################# -->
